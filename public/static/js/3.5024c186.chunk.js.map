{"version":3,"sources":["../../src/data/OperationData.ts","../../src/data/QueryData.ts","../../src/utils/useBaseQuery.ts","../../src/utils/useDeepMemo.ts","../../src/useQuery.ts","../../src/data/MutationData.ts","../../src/useMutation.ts","../../src/data/SubscriptionData.ts","../../src/useSubscription.ts","../../src/ssr/RenderPromises.ts","../../node_modules/graphql-tag/src/index.js","../../node_modules/graphql/jsutils/devAssert.mjs","../../node_modules/graphql/jsutils/defineToJSON.mjs","../../node_modules/graphql/jsutils/isObjectLike.mjs","../../node_modules/graphql/language/location.mjs","../../node_modules/graphql/language/printLocation.mjs","../../node_modules/graphql/error/GraphQLError.mjs","../../node_modules/graphql/error/syntaxError.mjs","../../node_modules/graphql/language/kinds.mjs","../../node_modules/graphql/language/source.mjs","../../node_modules/graphql/jsutils/defineToStringTag.mjs","../../node_modules/graphql/language/tokenKind.mjs","../../node_modules/graphql/language/lexer.mjs","../../node_modules/graphql/language/directiveLocation.mjs","../../node_modules/graphql/language/parser.mjs","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/Query.tsx","../../src/Mutation.tsx","../../src/Subscription.tsx"],"names":["options","context","isMounted","previousOptions","this","getOptions","setOptions","newOptions","storePrevious","isEqual","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","onNewData","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","obsRefetch","variables","query","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","obs","getCurrentResult","afterExecute","lazy","handleErrorOrCompleted","bind","ssrInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","Query","displayName","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","subscription","obsQuery","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","Object","assign","currentResult","partial","errors","length","graphQLErrors","partialRefetch","resetQueryStoreErrors","onCompleted","onError","unsubscribe","OperationData","useBaseQuery","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","QueryData","Promise","resolve","then","memoFn","key","ref","value","useDeepMemo","queryResult","useQuery","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","mutationContext","ignoreResults","updateResult","isMostRecentMutation","useMutation","mutationDataRef","mutationData","MutationData","initialize","getLoadingResult","shouldResubscribe","keys","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","useSubscription","subscriptionDataRef","SubscriptionData","queryPromises","Map","queryInfoTrie","observable","props","lookupQueryInfo","queryInstance","finish","seen","set","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","get","has","variablesString","JSON","stringify","info","parse","require","normalize","string","replace","trim","docCache","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","parseDocument","doc","cacheKey","parsed","kind","Error","stripLoc","removeLocAtThisLevel","docType","prototype","toString","call","map","d","loc","startToken","endToken","valueType","ast","astFragmentMap","definitions","i","fragmentDefinition","fragmentName","name","sourceKey","source","body","substring","start","end","console","warn","processFragments","gql","args","Array","slice","arguments","literals","default","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","module","exports","devAssert","condition","message","Boolean","defineToJSON","classObject","fn","toJSON","inspect","nodejsCustomInspectSymbol","_typeof","obj","Symbol","iterator","constructor","getLocation","position","match","lineRegexp","line","column","exec","index","printLocation","location","printSourceLocation","sourceLocation","firstLineColumnOffset","locationOffset","whitespace","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","concat","lines","split","locationLine","sublineIndex","Math","floor","sublineColumnNum","sublines","printPrefixedLines","subline","existingLines","filter","_ref","padLen","max","apply","_ref2","_ref3","str","prefix","join","len","GraphQLError","nodes","positions","path","originalError","extensions","_nodes","isArray","_source","node","_locations","_positions","reduce","list","pos","_extensions","originalExtensions","defineProperties","enumerable","writable","locations","stack","defineProperty","configurable","captureStackTrace","syntaxError","description","create","output","_i2","_error$nodes2","_i4","_error$locations2","printError","Kind","freeze","NAME","DOCUMENT","OPERATION_DEFINITION","VARIABLE_DEFINITION","SELECTION_SET","FIELD","ARGUMENT","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE","INT","FLOAT","STRING","BOOLEAN","NULL","ENUM","LIST","OBJECT","OBJECT_FIELD","DIRECTIVE","NAMED_TYPE","LIST_TYPE","NON_NULL_TYPE","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","FIELD_DEFINITION","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","UNION_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","ENUM_VALUE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","DIRECTIVE_DEFINITION","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","Source","toStringTag","TokenKind","SOF","EOF","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","BLOCK_STRING","COMMENT","advanceLexer","lastToken","token","lookahead","readToken","Tok","prev","printCharCode","code","isNaN","String","fromCharCode","toUpperCase","lexer","bodyLength","startPosition","charCodeAt","lineStart","positionAfterWhitespace","col","readComment","readName","firstCode","isFloat","readDigits","readNumber","chunkStart","rawValue","dedentBlockStringValue","readBlockString","charCode","a","b","c","char2hex","invalidSequence","readString","unexpectedCharacterMessage","DirectiveLocation","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","Parser","parseValue","parser","expectToken","parseValueLiteral","parseType","parseTypeReference","sourceObj","_lexer","startOfFileToken","advance","createLexer","_options","_proto","parseName","many","parseDefinition","peek","parseOperationDefinition","parseFragmentDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","peekDescription","unexpected","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","variable","parseVariable","defaultValue","expectOptionalToken","selections","parseSelection","parseFragment","parseField","alias","nameOrAlias","parseArguments","isConst","item","parseConstArgument","parseArgument","hasTypeCondition","expectOptionalKeyword","parseFragmentName","typeCondition","parseNamedType","expectKeyword","parseList","parseObject","parseStringLiteral","block","_this","values","any","_this2","fields","parseObjectField","parseDirective","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","interfaces","parseImplementsInterfaces","parseFieldsDefinition","types","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","parseArgumentDefs","parseInputValueDef","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","repeatable","parseDirectiveLocations","parseDirectiveLocation","noLocation","Loc","getTokenDesc","atToken","openKind","parseFn","closeKind","_arrayLikeToArray","arr","arr2","_toConsumableArray","iter","from","o","minLen","n","test","TypeError","Subscription","propTypes","object","func","isRequired","notifyOnNetworkStatusChange","bool","number","returnPartialData","oneOfType","arrayOf"],"mappings":"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","file":"static/js/3.5024c186.chunk.js","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport {\n  ApolloContextValue,\n  parser,\n  DocumentType,\n  operationName\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { CommonOptions } from '../types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: ApolloContextValue = {};\n  public client: ApolloClient<object> | undefined;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: ApolloContextValue) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !isEqual(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import {\n  ApolloQueryResult,\n  ApolloError,\n  NetworkStatus,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  UpdateQueryOptions,\n  SubscribeToMoreOptions,\n} from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  QueryResult,\n  ObservableQueryFields,\n} from '@apollo/react-common';\n\nimport {\n  QueryPreviousData,\n  QueryOptions,\n  QueryCurrentObservable,\n  QueryTuple,\n  QueryLazyOptions,\n} from '../types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData {\n  public onNewData: () => void;\n\n  private previousData: QueryPreviousData<TData, TVariables> = {};\n  private currentObservable: QueryCurrentObservable<TData, TVariables> = {};\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n\n  constructor({\n    options,\n    context,\n    onNewData,\n  }: {\n    options: QueryOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined,\n          } as QueryResult<TData, TVariables>,\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<ApolloQueryResult<any>> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n\n    // currentObservable.query is already assigned the registered SSR observable in initializeObservableQuery.\n    const obs = this.currentObservable.query!;\n    const currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables,\n      };\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context,\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult = (): QueryResult<TData, TVariables> => {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const ssrDisabled = this.getOptions().ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    let result;\n    if (this.ssrInitiated()) {\n      result =\n        this.context.renderPromises!.addQueryPromise(\n          this,\n          this.getExecuteResult\n        ) || ssrLoading;\n    }\n\n    return result;\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n      metadata: { reactComponent: { displayName } },\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable.query) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previousData.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null,\n      };\n      this.currentObservable.query = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions,\n      });\n\n      if (this.ssrInitiated()) {\n        this.context?.renderPromises?.registerSSRObservable(\n          this.currentObservable.query,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null,\n    };\n\n    if (\n      !isEqual(\n        newObservableQueryOptions,\n        this.previousData.observableQueryOptions\n      )\n    ) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .query!.setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  private startQuerySubscription() {\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n\n    const obsQuery = this.currentObservable.query!;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previousData.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          isEqual(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        this.onNewData();\n      },\n      error: (error) => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previousData.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !isEqual(error, this.previousData.error)\n        ) {\n          this.previousData.error = error;\n          this.onNewData();\n        }\n      },\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.currentObservable.query!.getLastError();\n    const lastResult = this.currentObservable.query!.getLastResult();\n    this.currentObservable.query!.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query!, {\n      lastError,\n      lastResult,\n    });\n  }\n\n  private getQueryResult(): QueryResult<TData, TVariables> {\n    let result: any = this.observableQueryFields();\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true,\n      };\n    } else {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.query!.getCurrentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error, data } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        loading,\n        networkStatus,\n        error,\n        called: true,\n      };\n\n      if (loading) {\n        const previousData =\n          this.previousData.result && this.previousData.result.data;\n        result.data =\n          previousData && data\n            ? {\n                ...previousData,\n                ...data,\n              }\n            : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query!.getLastResult() || ({} as any))\n            .data,\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.query!.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          !data &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading,\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading =\n      (this.previousData.result && this.previousData.result.loading) || false;\n    this.previousData.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable.query &&\n      this.currentObservable.query.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    const obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n\n    const { data, loading, error } = this.previousData.result;\n\n    if (!loading) {\n      const { query, variables, onCompleted, onError } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previousData.loading &&\n        isEqual(this.previousOptions.query, query) &&\n        isEqual(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n\n  private obsRefetch = (variables?: TVariables) =>\n    this.currentObservable.query!.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable.query!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable.query!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable.query!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    const observable = this.currentObservable.query!;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore,\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport {\n  getApolloContext,\n  OperationVariables,\n  QueryResult,\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions, QueryOptions, QueryTuple } from '../types';\nimport { QueryData } from '../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer((x) => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData =\n    queryDataRef.current ||\n    new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask.\n          Promise.resolve().then(forceUpdate);\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      },\n    });\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // SSR won't trigger the effect hook below that stores the current\n  // `QueryData` instance for future renders, so we'll handle that here if\n  // the current render is happening server side.\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: { ...updatedOptions, onError: undefined, onCompleted: undefined },\n    context,\n    tick,\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  useEffect(() => {\n    // We only need one instance of the `QueryData` class, so we'll store it\n    // as a ref to make it available on subsequent renders.\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return () => queryData.cleanup();\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal as isEqual } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !isEqual(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import { OperationVariables, QueryResult } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { ApolloError } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  OperationVariables,\n  ExecutionResult,\n  MutationFunctionOptions,\n  MutationResult\n} from '@apollo/react-common';\n\nimport { MutationOptions, MutationTuple } from '../types';\nimport { OperationData } from './OperationData';\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData {\n  private mostRecentMutationId: number;\n  private result: MutationResult<TData>;\n  private previousResult?: MutationResult<TData>;\n  private setResult: (result: MutationResult<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    result: MutationResult<TData>;\n    setResult: (result: MutationResult<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResult<TData>) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  };\n\n  private mutate(\n    mutationFunctionOptions: MutationFunctionOptions<TData, TVariables>\n  ) {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context: mutationContext = {},\n      awaitRefetchQueries = false,\n      fetchPolicy\n    } = this.getOptions();\n    const mutateOptions = { ...mutationFunctionOptions };\n\n    const mutateVariables = Object.assign(\n      {},\n      variables,\n      mutateOptions.variables\n    );\n    delete mutateOptions.variables;\n\n    return this.refreshClient().client.mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries:\n        mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context: mutationContext,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions\n    });\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: ExecutionResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResult<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !isEqual(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { MutationHookOptions, MutationTuple } from './types';\nimport { MutationData } from './data/MutationData';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import { equal as isEqual } from '@wry/equality';\nimport { ApolloContextValue, SubscriptionResult } from '@apollo/react-common';\n\nimport { OperationData } from './OperationData';\nimport { SubscriptionCurrentObservable, SubscriptionOptions } from '../types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !isEqual(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    const { onSubscriptionComplete } = this.getOptions();\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\n\nimport { SubscriptionHookOptions } from './types';\nimport { SubscriptionData } from './data/SubscriptionData';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => subscriptionData.cleanup.bind(subscriptionData), []);\n\n  return subscriptionData.execute(result);\n}\n","import { ObservableQuery } from 'apollo-client';\nimport { QueryOptions } from '../types';\nimport { DocumentNode } from 'graphql';\nimport { QueryData } from '../data/QueryData';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n};\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<QueryOptions<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    observable: ObservableQuery<any, TVariables>,\n    props: QueryOptions<TData, TVariables>\n  ) {\n    this.lookupQueryInfo(props).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ) {\n    return this.lookupQueryInfo(props).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: QueryData<TData, TVariables>,\n    finish: () => React.ReactNode\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance.getOptions(),\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData());\n        })\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n","var parser = require('graphql/language/parser');\n\nvar parse = parser.parse;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\n// A map docString -> graphql document\nvar docCache = {};\n\n// A map fragmentName -> [normalized source]\nvar fragmentSourceMap = {};\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// For testing.\nfunction resetCaches() {\n  docCache = {};\n  fragmentSourceMap = {};\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nvar printFragmentWarnings = true;\nfunction processFragments(ast) {\n  var astFragmentMap = {};\n  var definitions = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var fragmentDefinition = ast.definitions[i];\n\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n\n      // We know something about this fragment\n      if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {\n\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n\n      } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {\n        fragmentSourceMap[fragmentName] = {};\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      }\n\n      if (!astFragmentMap[sourceKey]) {\n        astFragmentMap[sourceKey] = true;\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  }\n\n  ast.definitions = definitions;\n  return ast;\n}\n\nfunction disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nfunction stripLoc(doc, removeLocAtThisLevel) {\n  var docType = Object.prototype.toString.call(doc);\n\n  if (docType === '[object Array]') {\n    return doc.map(function (d) {\n      return stripLoc(d, removeLocAtThisLevel);\n    });\n  }\n\n  if (docType !== '[object Object]') {\n    throw new Error('Unexpected input.');\n  }\n\n  // We don't want to remove the root loc field so we can use it\n  // for fragment substitution (see below)\n  if (removeLocAtThisLevel && doc.loc) {\n    delete doc.loc;\n  }\n\n  // https://github.com/apollographql/graphql-tag/issues/40\n  if (doc.loc) {\n    delete doc.loc.startToken;\n    delete doc.loc.endToken;\n  }\n\n  var keys = Object.keys(doc);\n  var key;\n  var value;\n  var valueType;\n\n  for (key in keys) {\n    if (keys.hasOwnProperty(key)) {\n      value = doc[keys[key]];\n      valueType = Object.prototype.toString.call(value);\n\n      if (valueType === '[object Object]' || valueType === '[object Array]') {\n        doc[keys[key]] = stripLoc(value, true);\n      }\n    }\n  }\n\n  return doc;\n}\n\nvar experimentalFragmentVariables = false;\nfunction parseDocument(doc) {\n  var cacheKey = normalize(doc);\n\n  if (docCache[cacheKey]) {\n    return docCache[cacheKey];\n  }\n\n  var parsed = parse(doc, { experimentalFragmentVariables: experimentalFragmentVariables });\n  if (!parsed || parsed.kind !== 'Document') {\n    throw new Error('Not a valid GraphQL document.');\n  }\n\n  // check that all \"new\" fragments inside the documents are consistent with\n  // existing fragments of the same name\n  parsed = processFragments(parsed);\n  parsed = stripLoc(parsed, false);\n  docCache[cacheKey] = parsed;\n\n  return parsed;\n}\n\nfunction enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nfunction disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nfunction gql(/* arguments */) {\n  var args = Array.prototype.slice.call(arguments);\n\n  var literals = args[0];\n\n  // We always get literals[0] and then matching post literals for each arg given\n  var result = (typeof(literals) === \"string\") ? literals : literals[0];\n\n  for (var i = 1; i < args.length; i++) {\n    if (args[i] && args[i].kind && args[i].kind === 'Document') {\n      result += args[i].loc.source.body;\n    } else {\n      result += args[i];\n    }\n\n    result += literals[i];\n  }\n\n  return parseDocument(result);\n}\n\n// Support typescript, which isn't as nice as Babel about default exports\ngql.default = gql;\ngql.resetCaches = resetCaches;\ngql.disableFragmentWarnings = disableFragmentWarnings;\ngql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;\ngql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;\n\nmodule.exports = gql;\n","export default function devAssert(condition, message) {\n  var booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n","import nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\n/**\n * The `defineToJSON()` function defines toJSON() and inspect() prototype\n * methods, if no function provided they become aliases for toString().\n */\n\nexport default function defineToJSON(classObject) {\n  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : classObject.prototype.toString;\n  classObject.prototype.toJSON = fn;\n  classObject.prototype.inspect = fn;\n\n  if (nodejsCustomInspectSymbol) {\n    classObject.prototype[nodejsCustomInspectSymbol] = fn;\n  }\n}\n","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport default function isObjectLike(value) {\n  return _typeof(value) == 'object' && value !== null;\n}\n","/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}\n","import { getLocation } from '../language/location';\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printLocation(location) {\n  return printSourceLocation(location.source, getLocation(location.source, location.start));\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = sourceLocation.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = sourceLocation.line + lineOffset;\n  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = sourceLocation.column + columnOffset;\n  var locationStr = \"\".concat(source.name, \":\").concat(lineNum, \":\").concat(columnNum, \"\\n\");\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  var locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    var sublineIndex = Math.floor(columnNum / 80);\n    var sublineColumnNum = columnNum % 80;\n    var sublines = [];\n\n    for (var i = 0; i < locationLine.length; i += 80) {\n      sublines.push(locationLine.slice(i, i + 80));\n    }\n\n    return locationStr + printPrefixedLines([[\"\".concat(lineNum), sublines[0]]].concat(sublines.slice(1, sublineIndex + 1).map(function (subline) {\n      return ['', subline];\n    }), [[' ', whitespace(sublineColumnNum - 1) + '^'], ['', sublines[sublineIndex + 1]]]));\n  }\n\n  return locationStr + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1), lines[lineIndex - 1]], [\"\".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {\n    var prefix = _ref2[0];\n    return prefix.length;\n  }));\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return lpad(padLen, prefix) + (line ? ' | ' + line : ' |');\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}\n","import isObjectLike from '../jsutils/isObjectLike';\nimport { getLocation } from '../language/location';\nimport { printLocation, printSourceLocation } from '../language/printLocation';\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport function GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n  var _source = source;\n\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n\n      return list;\n    }, []);\n  }\n\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations;\n\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return getLocation(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(getLocation(node.loc.source, node.loc.start));\n      }\n\n      return list;\n    }, []);\n  }\n\n  var _extensions = extensions;\n\n  if (_extensions == null && originalError != null) {\n    var originalExtensions = originalError.extensions;\n\n    if (isObjectLike(originalExtensions)) {\n      _extensions = originalExtensions;\n    }\n  }\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_locations)\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(path)\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _extensions || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_extensions)\n    }\n  }); // Include (non-enumerable) stack trace.\n\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: GraphQLError\n  },\n  name: {\n    value: 'GraphQLError'\n  },\n  toString: {\n    value: function toString() {\n      return printError(this);\n    }\n  }\n});\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\n\nexport function printError(error) {\n  var output = error.message;\n\n  if (error.nodes) {\n    for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {\n      var node = _error$nodes2[_i2];\n\n      if (node.loc) {\n        output += '\\n\\n' + printLocation(node.loc);\n      }\n    }\n  } else if (error.source && error.locations) {\n    for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {\n      var location = _error$locations2[_i4];\n      output += '\\n\\n' + printSourceLocation(error.source, location);\n    }\n  }\n\n  return output;\n}\n","import { GraphQLError } from './GraphQLError';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}\n","/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */\n","import devAssert from '../jsutils/devAssert';\nimport defineToStringTag from '../jsutils/defineToStringTag';\n\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\nexport var Source = function Source(body, name, locationOffset) {\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  this.locationOffset.line > 0 || devAssert(0, 'line in locationOffset is 1-indexed and must be positive');\n  this.locationOffset.column > 0 || devAssert(0, 'column in locationOffset is 1-indexed and must be positive');\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(Source);\n","/**\n * The `defineToStringTag()` function checks first to see if the runtime\n * supports the `Symbol` class and then if the `Symbol.toStringTag` constant\n * is defined as a `Symbol` instance. If both conditions are met, the\n * Symbol.toStringTag property is defined as a getter that returns the\n * supplied class constructor's name.\n *\n * @method defineToStringTag\n *\n * @param {Class<any>} classObject a class such as Object, String, Number but\n * typically one of your own creation through the class keyword; `class A {}`,\n * for example.\n */\nexport default function defineToStringTag(classObject) {\n  if (typeof Symbol === 'function' && Symbol.toStringTag) {\n    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {\n      get: function get() {\n        return this.constructor.name;\n      }\n    });\n  }\n}\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n","import defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { dedentBlockStringValue } from './blockString';\nimport { TokenKind } from './tokenKind';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n\n// @internal\nexport function isPunctuatorToken(token) {\n  var kind = token.kind;\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Tok, function () {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n});\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or e\n\n\n  if (code === 46 || code === 69 || code === 101) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n}\n","/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */\n","import inspect from '../jsutils/inspect';\nimport devAssert from '../jsutils/devAssert';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { Kind } from './kinds';\nimport { Source } from './source';\nimport { createLexer } from './lexer';\nimport { DirectiveLocation } from './directiveLocation';\nimport { TokenKind } from './tokenKind';\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n\nvar Parser =\n/*#__PURE__*/\nfunction () {\n  function Parser(source, options) {\n    var sourceObj = typeof source === 'string' ? new Source(source) : source;\n    sourceObj instanceof Source || devAssert(0, \"Must provide Source. Received: \".concat(inspect(sourceObj)));\n    this._lexer = createLexer(sourceObj);\n    this._options = options || {};\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.experimentalFragmentVariables) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        if (token.value === 'true' || token.value === 'false') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.BOOLEAN,\n            value: token.value === 'true',\n            loc: this.loc(token)\n          };\n        } else if (token.value === 'null') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.NULL,\n            loc: this.loc(token)\n          };\n        }\n\n        this._lexer.advance();\n\n        return {\n          kind: Kind.ENUM,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var types = [];\n\n    if (this.expectOptionalKeyword('implements')) {\n      // Optional leading ampersand\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || // Legacy support for the SDL?\n      this._options.allowLegacySDLImplementsInterfaces && this.peek(TokenKind.NAME));\n    }\n\n    return types;\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    // Legacy support for the SDL?\n    if (this._options.allowLegacySDLEmptyFields && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    var types = [];\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      // Optional leading pipe\n      this.expectOptionalToken(TokenKind.PIPE);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.PIPE));\n    }\n\n    return types;\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *   - extend interface Name Directives[Const]? FieldsDefinition\n   *   - extend interface Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    // Optional leading pipe\n    this.expectOptionalToken(TokenKind.PIPE);\n    var locations = [];\n\n    do {\n      locations.push(this.parseDirectiveLocation());\n    } while (this.expectOptionalToken(TokenKind.PIPE));\n\n    return locations;\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in\n   * the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    if (!this._options.noLocation) {\n      return new Loc(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing\n   * the lexer. Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token\n   * is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken || this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always\n   * return non-empty list that begins with a lex token of openKind and ends\n   * with a lex token of closeKind. Advances the parser to the next lex token\n   * after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Loc, function () {\n  return {\n    start: this.start,\n    end: this.end\n  };\n});\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { OperationVariables } from '@apollo/react-common';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { QueryComponentOptions } from './types';\n\nexport function Query<TData = any, TVariables = OperationVariables>(\n  props: QueryComponentOptions<TData, TVariables>\n) {\n  const { children, query, ...options } = props;\n  const result = useQuery(query, options);\n  return children && result ? children(result) : null;\n}\n\nexport namespace Query {\n  export const propTypes = {\n    client: PropTypes.object,\n    children: PropTypes.func.isRequired,\n    fetchPolicy: PropTypes.string,\n    notifyOnNetworkStatusChange: PropTypes.bool,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    pollInterval: PropTypes.number,\n    query: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    ssr: PropTypes.bool,\n    partialRefetch: PropTypes.bool,\n    returnPartialData: PropTypes.bool\n  };\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { useMutation } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { MutationComponentOptions } from './types';\n\nexport function Mutation<TData = any, TVariables = OperationVariables>(\n  props: MutationComponentOptions<TData, TVariables>\n) {\n  const [runMutation, result] = useMutation(props.mutation, props);\n  return props.children ? props.children(runMutation, result) : null;\n}\n\nexport namespace Mutation {\n  export const propTypes = {\n    mutation: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    refetchQueries: PropTypes.oneOfType([\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n      ),\n      PropTypes.func\n    ]),\n    awaitRefetchQueries: PropTypes.bool,\n    update: PropTypes.func,\n    children: PropTypes.func.isRequired,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    fetchPolicy: PropTypes.string\n  };\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { useSubscription } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { SubscriptionComponentOptions } from './types';\n\nexport function Subscription<TData = any, TVariables = OperationVariables>(\n  props: SubscriptionComponentOptions<TData, TVariables>\n) {\n  const result = useSubscription(props.subscription, props);\n  return props.children && result ? props.children(result) : null;\n}\n\nexport namespace Subscription {\n  export const propTypes = {\n    subscription: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    children: PropTypes.func,\n    onSubscriptionData: PropTypes.func,\n    onSubscriptionComplete: PropTypes.func,\n    shouldResubscribe: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  };\n}\n"],"sourceRoot":""}